<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0051)file://C:\Users\40\Desktop\New folder (4)\WebGL.htm -->
<!-- saved from url=(0031)https://knudsoncassy.github.io/ --><!-- saved from url=(0033)https://static.iohk.io/butterfly/ --><HTML><HEAD><META 
content="IE=5.0000" http-equiv="X-UA-Compatible">
<TITLE>WebGL</TITLE>
<META content=IE=5.0000 http-equiv=X-UA-Compatible>
<META content=IE=5.0000 http-equiv=X-UA-Compatible>
<META content="text/html; charset=utf-8" http-equiv=Content-Type>
<META name=viewport 
content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<STYLE>UL {
	LIST-STYLE-TYPE: none; OVERFLOW: hidden; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: #111
}
LI {
	FLOAT: left
}
LI A {
	TEXT-DECORATION: none; COLOR: white; PADDING-BOTTOM: 14px; TEXT-ALIGN: center; PADDING-TOP: 14px; PADDING-LEFT: 16px; DISPLAY: block; PADDING-RIGHT: 16px
}
UNKNOWN {
	BACKGROUND-COLOR: #555
}
.active {
	BACKGROUND-COLOR: #4caf50
}
</STYLE>

<META name=GENERATOR content="MSHTML 11.00.10570.1001"></HEAD>
<BODY>&lt;![endif]--&gt; 
<UL><LI><A href="https://knudsoncassy.github.io/black_friday.htm">FRIDAY</A> </LI><LI><A 
 <LI><A href="https://knudsoncassy.github.io/00.htm">SOUND</A> </LI><LI><A 
  <LI><A href="https://knudsoncassy.github.io/2index2.htm">AIR</A> </LI>
  <LI><A href="https://knudsoncassy.github.io/6vid.html">WEBGL</A> </LI>
  <LI><A href="https://knudsoncassy.github.io/air_.html.htm">VISION</A> </LI>
  <LI><A href="https://knudsoncassy.github.io/index.htm">HOME</A> </LI></UL>
<SCRIPT src="index_files/OdEhsZOwKZ_TWTLS_B6UqmQNGis.js"></SCRIPT>
<LINK rel=stylesheet href="WebGL_files/index.css">
<META name=GENERATOR content="MSHTML 11.00.10570.1001"><CANVAS></CANVAS><!-- These javascript files are not necessary for the production. It is for demo purpose -->
<SCRIPT src="index_files/dat.gui.js"></SCRIPT>
<!-- Required javascript files -->
<SCRIPT src="index_files/index.js"></SCRIPT>

<SCRIPT>
var hpgButterfly = window.hpgButterfly; // a global variable for this homepage graphic
var time = +new Date() / 1000;
var canvas = document.querySelector('canvas');
var isMultiTouch = false;
var multiTouchChargeToggle = false;
var touchEvents = [];
var inputXY;

if (hpgButterfly.checkIsSupported (canvas)) {
    init();
} else {
    // No WebGL support here.
}

function init () {
    hpgButterfly.init();

    // to restart and regenerate the butterfly
    hpgButterfly.reset();

    window.addEventListener('resize', onResize);
    onResize();
    loop();

    // you can alter the input event as you wish to or even use some input event library.
    canvas.addEventListener('mousedown', onDown);
    canvas.addEventListener('touchstart', getTouchBound(onDown));
    canvas.addEventListener('mousemove', onMove);
    canvas.addEventListener('touchmove', getTouchBound(onMove));
    canvas.addEventListener('mouseup', onUp);
    canvas.addEventListener('touchend', getTouchBound(onUp));
    canvas.addEventListener('click', onClick);

    // the following is not needed in the production
    var properties = hpgButterfly.properties;
    /*
    var gui = new dat.GUI();
    var scatteringGui = gui.addFolder('scattering');
    scatteringGui.addColor(properties, 'baseColorHex');
    scatteringGui.add(properties, 'scatterDivider', 1, 100, 0.0001).name('scattering divider');
    scatteringGui.add(properties, 'scatterDividerPowInv', 0.05, 5, 0.0001).name('scattering inv');
    scatteringGui.open();
    var particleGui = gui.addFolder('particle');
    particleGui.addColor(properties, 'color4Hex');
    particleGui.addColor(properties, 'color5aHex');
    particleGui.add(properties, 'particleMouseForce', 0.0001, 0.02, 0.0001).name('mouse force');
    particleGui.open();
    var pulseGui = gui.addFolder('pulse');
    pulseGui.add(properties, 'pulseIntervalRatio', 0.1, 1, 0.0001).name('interval ratio');
    pulseGui.add(properties, 'pulseDuration', 0.5, 5, 0.0001).name('duration');
    pulseGui.open();
    var postprocessingGui = gui.addFolder('postprocessing');
    postprocessingGui.add(properties, 'blendRatio', 0.01, 1, 0.0001).name('temporal blending');
    postprocessingGui.add(properties, 'rgbOffset', -0.02, 0.02, 0.0001).name('rgb offset');
    postprocessingGui.add(properties, 'bloomAmount', 0, 3, 0.0001).name('bloom amount');
    postprocessingGui.add(properties, 'bloomRadius', -1.5, 1.5, 0.0001).name('bloom radius');
    postprocessingGui.open();*/
}

function getInputXY (evt) {
    var rect = canvas.getBoundingClientRect();
    var xy = {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
    };
    return {
      x: (evt.clientX - rect.left) / rect.width * 2 - 1,
      y: 1 - ((evt.clientY - rect.top) / rect.height * 2)
    };
}

function onDown (evt) {
    inputXY = getInputXY(evt);
    onMove(evt);
}

function onMove (evt) {
    var newInputXY = getInputXY(evt);
    hpgButterfly.properties.mouse.set(newInputXY.x, newInputXY.y); // x, y as in {x:  -1 to 1, y: -1 to 1 }
    if (!isMultiTouch) {
        if (!inputXY) inputXY = newInputXY;
        hpgButterfly.draw(inputXY.x, inputXY.y, newInputXY.x, newInputXY.y);
    }
    inputXY = newInputXY;
}

function onUp (evt) {
}

function onClick (evt) {
    // to restart and regenerate the butterfly
    hpgButterfly.reset();
}

function getTouchBound (fn) {
    return function (evt) {
        if (evt.preventDefault) evt.preventDefault();
        isMultiTouch = evt.touches.length > 1;
        if (isMultiTouch) {
            touchEvents[0] = getInputXY(evt.touches[0]);
            touchEvents[1] = getInputXY(evt.touches[1]);
        }
        fn.call(this, evt.changedTouches[0] || evt.touches[0]);
    };
}

function onResize () {
    // resize the web canvas to the screen size
    hpgButterfly.resize(window.innerWidth, window.innerHeight);
}

function loop () {
    requestAnimationFrame(loop);
    render();
}

function render () {
    var newTime = +new Date() / 1000;
    var deltaTime = newTime - time;

    // to create that "Charging Effect".
    if (isMultiTouch) {
        let from = touchEvents[multiTouchChargeToggle ? 0 : 1];
        let to = touchEvents[multiTouchChargeToggle ? 1 : 0];
        hpgButterfly.draw(from.x + (Math.random() - 0.5) * 0.1, from.y + (Math.random() - 0.5) * 0.1, to.x + (Math.random() - 0.5) * 0.1, to.y + (Math.random() - 0.5) * 0.1);
        multiTouchChargeToggle = !multiTouchChargeToggle;
    }

    // pass delta time in second into the api
    hpgButterfly.render(deltaTime);
    time = newTime;
}
        </SCRIPT>
</BODY></HTML>
